{"$message_type":"diagnostic","message":"expected `::`, found `:`","code":null,"level":"error","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":49,"byte_end":50,"line_start":4,"line_end":4,"column_start":8,"column_end":9,"is_primary":true,"text":[{"text":"    ffi:CString,","highlight_start":8,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import paths are delimited using `::`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use double colon","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":49,"byte_end":50,"line_start":4,"line_end":4,"column_start":8,"column_end":9,"is_primary":true,"text":[{"text":"    ffi:CString,","highlight_start":8,"highlight_end":9}],"label":null,"suggested_replacement":"::","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected `::`, found `:`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:4:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ffi:CString,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: import paths are delimited using `::`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use double colon\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    ffi:\u001b[0m\u001b[0m\u001b[38;5;10m:\u001b[0m\u001b[0mCString,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected `;`, found keyword `unsafe`","code":null,"level":"error","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":5994,"byte_end":6000,"line_start":156,"line_end":156,"column_start":13,"column_end":19,"is_primary":false,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap().unwrap(), HEAP_FLAGS(0), Some(buffer))};","highlight_start":13,"highlight_end":19}],"label":"unexpected token","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":5980,"byte_end":5980,"line_start":155,"line_end":155,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"            println!(\"[!] GetProcAddress Failed\")","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"add `;` here","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":5980,"byte_end":5980,"line_start":155,"line_end":155,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"            println!(\"[!] GetProcAddress Failed\")","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected `;`, found keyword `unsafe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:155:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            println!(\"[!] GetProcAddress Failed\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: add `;` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            unsafe { HeapFree(GetProcessHeap().unwrap(), HEAP_FLAGS(0), Some(buffer))};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14munexpected token\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `ptr`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":6658,"byte_end":6661,"line_start":175,"line_end":175,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"        let mut terminator: *const i8 = ptr::null();","highlight_start":41,"highlight_end":44}],"label":"use of unresolved module or unlinked crate `ptr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `ptr`, use `cargo add ptr` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"a builtin type with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":6658,"byte_end":6661,"line_start":175,"line_end":175,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"        let mut terminator: *const i8 = ptr::null();","highlight_start":41,"highlight_end":44}],"label":null,"suggested_replacement":"str","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider importing this module","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::ptr;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: use of unresolved module or unlinked crate `ptr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:175:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut terminator: *const i8 = ptr::null();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `ptr`, use `cargo add ptr` to add it to your `Cargo.toml`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a builtin type with a similar name exists\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let mut terminator: *const i8 = \u001b[0m\u001b[0m\u001b[38;5;9mptr\u001b[0m\u001b[0m::null();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let mut terminator: *const i8 = \u001b[0m\u001b[0m\u001b[38;5;10mstr\u001b[0m\u001b[0m::null();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this module\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use std::ptr;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 3 arguments but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":2351,"byte_end":2353,"line_start":46,"line_end":46,"column_start":27,"column_end":29,"is_primary":false,"text":[{"text":"    if !ipv4_deobfuscation() {","highlight_start":27,"highlight_end":29}],"label":"three arguments of type `&[&str]`, `&mut Option<Vec<u8>>`, and `&mut usize` are missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":2333,"byte_end":2351,"line_start":46,"line_end":46,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"    if !ipv4_deobfuscation() {","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":4407,"byte_end":4426,"line_start":113,"line_end":113,"column_start":23,"column_end":42,"is_primary":false,"text":[{"text":"fn ipv4_deobfuscation(ipv4_array: &[&str], d_address: &mut Option<Vec<u8>>, d_size: &mut usize) -> bool {","highlight_start":23,"highlight_end":42}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":4428,"byte_end":4459,"line_start":113,"line_end":113,"column_start":44,"column_end":75,"is_primary":false,"text":[{"text":"fn ipv4_deobfuscation(ipv4_array: &[&str], d_address: &mut Option<Vec<u8>>, d_size: &mut usize) -> bool {","highlight_start":44,"highlight_end":75}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":4461,"byte_end":4479,"line_start":113,"line_end":113,"column_start":77,"column_end":95,"is_primary":false,"text":[{"text":"fn ipv4_deobfuscation(ipv4_array: &[&str], d_address: &mut Option<Vec<u8>>, d_size: &mut usize) -> bool {","highlight_start":77,"highlight_end":95}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":4388,"byte_end":4406,"line_start":113,"line_end":113,"column_start":4,"column_end":22,"is_primary":true,"text":[{"text":"fn ipv4_deobfuscation(ipv4_array: &[&str], d_address: &mut Option<Vec<u8>>, d_size: &mut usize) -> bool {","highlight_start":4,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the arguments","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":2351,"byte_end":2353,"line_start":46,"line_end":46,"column_start":27,"column_end":29,"is_primary":true,"text":[{"text":"    if !ipv4_deobfuscation() {","highlight_start":27,"highlight_end":29}],"label":null,"suggested_replacement":"(/* &[&str] */, /* &mut Option<Vec<u8>> */, /* &mut usize */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function takes 3 arguments but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:46:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if !ipv4_deobfuscation() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthree arguments of type `&[&str]`, `&mut Option<Vec<u8>>`, and `&mut usize` are missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:113:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn ipv4_deobfuscation(ipv4_array: &[&str], d_address: &mut Option<Vec<u8>>, d_size: &mut usize) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    if !ipv4_deobfuscation(\u001b[0m\u001b[0m\u001b[38;5;10m/* &[&str] */, /* &mut Option<Vec<u8>> */, /* &mut usize */\u001b[0m\u001b[0m) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 5 arguments but 4 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":6851,"byte_end":6861,"line_start":181,"line_end":181,"column_start":17,"column_end":27,"is_primary":false,"text":[{"text":"                tmp_buffer","highlight_start":17,"highlight_end":27}],"label":"argument #4 of type `*mut *const i8` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":6715,"byte_end":6723,"line_start":177,"line_end":177,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"            rtl_ipv4(","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":6723,"byte_end":6876,"line_start":177,"line_end":182,"column_start":21,"column_end":14,"is_primary":true,"text":[{"text":"            rtl_ipv4(","highlight_start":21,"highlight_end":22},{"text":"                ip_cstr.as_ptr(),","highlight_start":1,"highlight_end":34},{"text":"                0, // FALSE for Strict","highlight_start":1,"highlight_end":39},{"text":"                &mut terminator,","highlight_start":1,"highlight_end":33},{"text":"                tmp_buffer","highlight_start":1,"highlight_end":27},{"text":"            )","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":"(ip_cstr.as_ptr(), 0, &mut terminator, /* *mut *const i8 */, tmp_buffer)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function takes 5 arguments but 4 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:177:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            rtl_ipv4(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                tmp_buffer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14margument #4 of type `*mut *const i8` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            rtl_ipv4\u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m-                 ip_cstr.as_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m-                 0, // FALSE for Strict\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m-                 &mut terminator,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m-                 tmp_buffer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m-             )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            rtl_ipv4\u001b[0m\u001b[0m\u001b[38;5;10m(ip_cstr.as_ptr(), 0, &mut terminator, /* *mut *const i8 */, tmp_buffer)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":7067,"byte_end":7068,"line_start":187,"line_end":187,"column_start":49,"column_end":50,"is_primary":false,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":49,"highlight_end":50}],"label":"expected `HEAP_FLAGS`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":7040,"byte_end":7048,"line_start":187,"line_end":187,"column_start":22,"column_end":30,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":22,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected `HANDLE`, found `Result<HANDLE, Error>`","code":null,"level":"note","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":7049,"byte_end":7065,"line_start":187,"line_end":187,"column_start":31,"column_end":47,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":31,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected struct `HANDLE`\n     found enum `Result<HANDLE, windows_core::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected `Option<*const c_void>`, found `*mut c_void`","code":null,"level":"note","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":7070,"byte_end":7076,"line_start":187,"line_end":187,"column_start":52,"column_end":58,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":52,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"    expected enum `Option<*const c_void>`\nfound raw pointer `*mut c_void`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Lars André Hansen\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-0.61.3\\src\\Windows\\Win32\\System\\Memory\\mod.rs","byte_start":17499,"byte_end":17507,"line_start":200,"line_end":200,"column_start":15,"column_end":23,"is_primary":true,"text":[{"text":"pub unsafe fn HeapFree(hheap: super::super::Foundation::HANDLE, dwflags: HEAP_FLAGS, lpmem: Option<*const core::ffi::c_void>) -> windows_core::Result<()> {","highlight_start":15,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `Result<HANDLE, windows_core::Error>` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":7065,"byte_end":7065,"line_start":187,"line_end":187,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in `windows::Win32::System::Memory::HEAP_FLAGS`","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":7067,"byte_end":7067,"line_start":187,"line_end":187,"column_start":49,"column_end":49,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":49,"highlight_end":49}],"label":null,"suggested_replacement":"windows::Win32::System::Memory::HEAP_FLAGS(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":7068,"byte_end":7068,"line_start":187,"line_end":187,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in `Some`","code":null,"level":"help","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":7070,"byte_end":7070,"line_start":187,"line_end":187,"column_start":52,"column_end":52,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":52,"highlight_end":52}],"label":null,"suggested_replacement":"Some(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\Obfuscation.rs","byte_start":7076,"byte_end":7076,"line_start":187,"line_end":187,"column_start":58,"column_end":58,"is_primary":true,"text":[{"text":"            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };","highlight_start":58,"highlight_end":58}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:187:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `HEAP_FLAGS`, found integer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected `HANDLE`, found `Result<HANDLE, Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:187:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `HANDLE`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<\u001b[0m\u001b[0mHANDLE, \u001b[0m\u001b[0m\u001b[1m\u001b[35mwindows_core::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected `Option<*const c_void>`, found `*mut c_void`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:187:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            unsafe { HeapFree(GetProcessHeap(), 0, buffer) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m:     expected enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mOption<*const c_void>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found raw pointer `\u001b[0m\u001b[0m\u001b[1m\u001b[35m*mut c_void\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Lars André Hansen\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-0.61.3\\src\\Windows\\Win32\\System\\Memory\\mod.rs:200:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn HeapFree(hheap: super::super::Foundation::HANDLE, dwflags: HEAP_FLAGS, lpmem: Option<*const core::ffi::c_void>) -> windows_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `Result<HANDLE, windows_core::Error>` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            unsafe { HeapFree(GetProcessHeap()\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m, 0, buffer) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in `windows::Win32::System::Memory::HEAP_FLAGS`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            unsafe { HeapFree(GetProcessHeap(), \u001b[0m\u001b[0m\u001b[38;5;10mwindows::Win32::System::Memory::HEAP_FLAGS(\u001b[0m\u001b[0m0\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m, buffer) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++++++++\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in `Some`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            unsafe { HeapFree(GetProcessHeap(), 0, \u001b[0m\u001b[0m\u001b[38;5;10mSome(\u001b[0m\u001b[0mbuffer\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `ptr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\Obfuscation.rs","byte_start":16,"byte_end":19,"line_start":2,"line_end":2,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    ptr::*,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `ptr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Obfuscation.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ptr::*,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 6 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0308, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0061, E0308, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
